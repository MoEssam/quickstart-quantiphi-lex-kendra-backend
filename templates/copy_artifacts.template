AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  SourceBucket:
    Type: String
    Description: >-
      The S3 bucket you have created for your copy of Quick Start assets, if you decide
      to customize or extend the Quick Start for your own use. The bucket name can
      include numbers, lowercase letters, uppercase letters, and hyphens, but should
      not start or end with a hyphen.
    Default: aws-quickstart
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
  
  CopyLambdaFunctionRole:
    Type: String
    Description: IAM Role for Lambda
    Default: CopyLambdaIamRole

  CopyLambdaFunctionPolicy:
    Type: String
    Description: IAM Policy for Copy Lambda Function
    Default: CopyLambdaPolicy

  S3BucketKeyKendraIndexOps:
    AllowedPattern: ^.*.zip$
    Description: The name of the S3 Key which has the Lambda code for creation of Index
    Type: String

  S3BucketKeyFallbackIntentHandler:
    AllowedPattern: ^.*.zip$
    Description: The name of the S3 key which has the Lambda Code for handling Fallback Intent
    Type: String

  S3BucketLambdaLayerKey:
    AllowedPattern: ^.*.zip$
    Description: The name of the S3 key which has the Layer libraries
    Type: String  

  LexBotS3FileKey:
    AllowedPattern: ^.*.json$
    Description: The S3 file key where Lex bot JSON is stored
    Type: String

  S3BucketKeyLexBotOps:
    AllowedPattern: ^.*.zip$
    Description: The S3 file key of the Lambda Code for Lex bot Operations
    Type: String

Resources:
  LambdaFunctionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - kendra.amazonaws.com
            - lex.amazonaws.com
            - s3.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      RoleName: !Ref CopyLambdaFunctionRole

  LambdaFunctionIAMPolicy:
    DependsOn:
    - LambdaFunctionIAMRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref CopyLambdaFunctionPolicy
      Roles:
      - Ref: LambdaFunctionIAMRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - "logs:CreateLogGroup"
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
          Resource:
          - arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
          - "s3:*"
          Resource:
          - "*"
        - Effect: Allow
          Action:
          - lex:*
          Resource:
          - "*"
        - Effect: Allow
          Action:
          - kendra:*
          Resource:
          - "*"
        - Effect: Allow
          Action:
          - "iam:GetRole"
          - "iam:PassRole"
          Resource:
          - "*"
        - Effect: Allow
          Action:
          - lambda:*
          Resource:
          - "*"
  LambdaZipsBucket:
    Type: AWS::S3::Bucket

  CopyZipsFunction:
    DependsOn:
    - LambdaFunctionIAMPolicy
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt LambdaFunctionIAMRole.Arn
      Timeout: 240
      Code:
        ZipFile: !Join
          - "\n"
          - - import json
            - import logging
            - import threading
            - import boto3
            - import cfnresponse
            - ''
            - 'def copy_objects(source_bucket, dest_bucket, prefix, objects):'
            - '   s3 = boto3.client(''s3'')'
            - '   for o in objects:'
            - '       key = prefix + o'
            - '       copy_source = {'
            - '           ''Bucket'': source_bucket,'
            - '           ''Key'': key'
            - '       }'
            - '       print((''copy_source: %s'' % copy_source))'
            - '       print((''dest_bucket = %s''%dest_bucket))'
            - '       print((''key = %s'' %key))'
            - '       s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,'
            - '             Key=key)'
            - ''
            - 'def delete_objects(bucket, prefix, objects):'
            - '   s3 = boto3.client(''s3'')'
            - '   objects = {''Objects'': [{''Key'': prefix + o} for o in objects]}'
            - '   s3.delete_objects(Bucket=bucket, Delete=objects)'
            - ''
            - 'def timeout(event, context):'
            - '   logging.error(''Execution is about to time out, sending failure
              response to CloudFormation'')'
            - '   cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)'
            - ''
            - 'def handler(event, context):'
            - '   # make sure we send a failure to CloudFormation if the function'
            - '   # is going to timeout'
            - '   timer = threading.Timer((context.get_remaining_time_in_millis()'
            - '             / 1000.00) - 0.5, timeout, args=[event, context])'
            - '   timer.start()'
            - '   print((''Received event: %s'' % json.dumps(event)))'
            - '   status = cfnresponse.SUCCESS'
            - '   try:'
            - '       source_bucket = event[''ResourceProperties''][''SourceBucket'']'
            - '       dest_bucket = event[''ResourceProperties''][''DestBucket'']'
            - '       prefix = event[''ResourceProperties''][''Prefix'']'
            - '       objects = event[''ResourceProperties''][''Objects'']'
            - '       if event[''RequestType''] == ''Delete'':'
            - '           delete_objects(dest_bucket, prefix, objects)'
            - '       else:'
            - '           copy_objects(source_bucket, dest_bucket, prefix, objects)'
            - '   except Exception as e:'
            - '       logging.error(''Exception: %s'' % e, exc_info=True)'
            - '       status = cfnresponse.FAILED'
            - '   finally:'
            - '       timer.cancel()'
            - '       cfnresponse.send(event, context, status, {}, None)'
            - ''
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'SourceBucket'
      Prefix: ""
      Objects:
        - !Ref S3BucketKeyKendraIndexOps
        - !Ref S3BucketKeyFallbackIntentHandler
        - !Ref S3BucketLambdaLayerKey
        - !Ref LexBotS3FileKey
        - !Ref S3BucketKeyLexBotOps

Outputs:
  TargetBucket:
    Value: !Ref 'LambdaZipsBucket'
    Description: S3 Bucket Name
